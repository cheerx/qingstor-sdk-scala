{{- $service := .Data.Service -}}
{{- $subServices := .Data.SubServices -}}
package com.qingstor.sdk.service

import com.qingstor.sdk.config.QSConfig
import com.qingstor.sdk.model.QSModels._
import com.qingstor.sdk.request.{QSRequest, ResponseUnpacker}
import com.qingstor.sdk.service.Types._
import com.qingstor.sdk.annotation.ParamAnnotation
import com.qingstor.sdk.constant.QSConstants
import com.qingstor.sdk.service.QSJsonProtocol._
import akka.stream.ActorMaterializer
import scala.concurrent.{ExecutionContextExecutor, Future}
import com.qingstor.sdk.service.Bucket._
import akka.http.scaladsl.unmarshalling.Unmarshal
import java.io.File
import com.qingstor.sdk.exception.QingStorException

class Bucket(_config: QSConfig, _bucketName: String, _zone: String) {
    implicit val system = QSConstants.QingStorSystem
    implicit val materializer = ActorMaterializer()
    implicit val ece: ExecutionContextExecutor = system.dispatcher
    val config: QSConfig = _config
    val bucketName: String = _bucketName
    val zone: String = _zone

    {{range $_, $subService := $subServices}}
        {{range $_, $operation := $subService.Operations}}
            {{template "RenderOperation" passThrough $subService $operation}}
        {{end}}
    {{end}}
}

object Bucket {
    def apply(config: QSConfig, bucketName: String, zone: String): Bucket = new Bucket(config, bucketName, zone)

    {{range $_, $subService := $subServices}}
        {{- range $_, $operation := $subService.Operations}}
            {{template "RenderProperty" passThrough $operation}}
        {{- end}}
    {{end}}
}