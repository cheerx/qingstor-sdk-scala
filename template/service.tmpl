{{- $service := .Data.Service -}}
{{- $subServices := .Data.SubServices -}}

package com.qingstor.sdk.service

import akka.actor.ActorSystem
import akka.stream.ActorMaterializer
import com.qingstor.sdk.config.QSConfig
import com.qingstor.sdk.model.QSModels._
import com.qingstor.sdk.request.{QSRequest, ResponseUnpacker}
import com.qingstor.sdk.service.Types.BucketModel
import com.qingstor.sdk.annotation.ParamAnnotation
import com.qingstor.sdk.constant.QSConstants
import com.qingstor.sdk.service.QingStor._
import com.qingstor.sdk.service.Types.QSJsonProtocol._
import scala.concurrent.{ExecutionContextExecutor, Future}

{{if $service.Description}}// {{$service.Name | camelCase}}Service: {{$service.Description}}{{end}}
class QingStor(private val _config: QSConfig)(
	implicit val system: ActorSystem,
	val mat: ActorMaterializer,
	val ec: ExecutionContextExecutor) {
	val config: QSConfig = _config

	{{range $operation := $service.Operations}}
		{{template "RenderOperation" passThrough $service $operation}}
	{{end}}
}


object QingStor {
	def apply(config: QSConfig)(implicit
		system: ActorSystem,
		mat: ActorMaterializer,
		ec: ExecutionContextExecutor): QingStor =
			new QingStor(config)

	{{range $operation := $service.Operations}}
		{{template "RenderProperty" passThrough $operation}}
	{{end}}
}